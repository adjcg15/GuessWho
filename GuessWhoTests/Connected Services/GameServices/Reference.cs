//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GuessWhoTests.GameServices {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameServices.IUserService", CallbackContract=typeof(GuessWhoTests.GameServices.IUserServiceCallback))]
    public interface IUserService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/Subscribe")]
        void Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/Subscribe")]
        System.Threading.Tasks.Task SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/Unsubscribe")]
        void Unsubscribe();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserService/Unsubscribe")]
        System.Threading.Tasks.Task UnsubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetActiveUsers", ReplyAction="http://tempuri.org/IUserService/GetActiveUsersResponse")]
        string[] GetActiveUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/GetActiveUsers", ReplyAction="http://tempuri.org/IUserService/GetActiveUsersResponse")]
        System.Threading.Tasks.Task<string[]> GetActiveUsersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserService/UserStatusChanged", ReplyAction="http://tempuri.org/IUserService/UserStatusChangedResponse")]
        void UserStatusChanged(string userNickname, bool isActive);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserServiceChannel : GuessWhoTests.GameServices.IUserService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserServiceClient : System.ServiceModel.DuplexClientBase<GuessWhoTests.GameServices.IUserService>, GuessWhoTests.GameServices.IUserService {
        
        public UserServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public UserServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public UserServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public UserServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Subscribe() {
            base.Channel.Subscribe();
        }
        
        public System.Threading.Tasks.Task SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public void Unsubscribe() {
            base.Channel.Unsubscribe();
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync() {
            return base.Channel.UnsubscribeAsync();
        }
        
        public string[] GetActiveUsers() {
            return base.Channel.GetActiveUsers();
        }
        
        public System.Threading.Tasks.Task<string[]> GetActiveUsersAsync() {
            return base.Channel.GetActiveUsersAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameServices.IAuthenticationService")]
    public interface IAuthenticationService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/RegisterUser", ReplyAction="http://tempuri.org/IAuthenticationService/RegisterUserResponse")]
        GuessWhoDataAccess.Response<bool> RegisterUser(GuessWhoDataAccess.Profile profile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/RegisterUser", ReplyAction="http://tempuri.org/IAuthenticationService/RegisterUserResponse")]
        System.Threading.Tasks.Task<GuessWhoDataAccess.Response<bool>> RegisterUserAsync(GuessWhoDataAccess.Profile profile);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/Login", ReplyAction="http://tempuri.org/IAuthenticationService/LoginResponse")]
        GuessWhoDataAccess.Response<GuessWhoDataAccess.Profile> Login(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/Login", ReplyAction="http://tempuri.org/IAuthenticationService/LoginResponse")]
        System.Threading.Tasks.Task<GuessWhoDataAccess.Response<GuessWhoDataAccess.Profile>> LoginAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/VerifyUserRegisteredByEmail", ReplyAction="http://tempuri.org/IAuthenticationService/VerifyUserRegisteredByEmailResponse")]
        GuessWhoDataAccess.Response<GuessWhoDataAccess.Profile> VerifyUserRegisteredByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/VerifyUserRegisteredByEmail", ReplyAction="http://tempuri.org/IAuthenticationService/VerifyUserRegisteredByEmailResponse")]
        System.Threading.Tasks.Task<GuessWhoDataAccess.Response<GuessWhoDataAccess.Profile>> VerifyUserRegisteredByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/VerifyUserRegisteredByNickName", ReplyAction="http://tempuri.org/IAuthenticationService/VerifyUserRegisteredByNickNameResponse")]
        GuessWhoDataAccess.Response<GuessWhoDataAccess.Profile> VerifyUserRegisteredByNickName(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/VerifyUserRegisteredByNickName", ReplyAction="http://tempuri.org/IAuthenticationService/VerifyUserRegisteredByNickNameResponse")]
        System.Threading.Tasks.Task<GuessWhoDataAccess.Response<GuessWhoDataAccess.Profile>> VerifyUserRegisteredByNickNameAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAuthenticationService/Logout")]
        void Logout(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IAuthenticationService/Logout")]
        System.Threading.Tasks.Task LogoutAsync(string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/GetAvatar", ReplyAction="http://tempuri.org/IAuthenticationService/GetAvatarResponse")]
        GuessWhoDataAccess.Response<byte[]> GetAvatar(string userNickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAuthenticationService/GetAvatar", ReplyAction="http://tempuri.org/IAuthenticationService/GetAvatarResponse")]
        System.Threading.Tasks.Task<GuessWhoDataAccess.Response<byte[]>> GetAvatarAsync(string userNickname);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAuthenticationServiceChannel : GuessWhoTests.GameServices.IAuthenticationService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticationServiceClient : System.ServiceModel.ClientBase<GuessWhoTests.GameServices.IAuthenticationService>, GuessWhoTests.GameServices.IAuthenticationService {
        
        public AuthenticationServiceClient() {
        }
        
        public AuthenticationServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AuthenticationServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AuthenticationServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public GuessWhoDataAccess.Response<bool> RegisterUser(GuessWhoDataAccess.Profile profile) {
            return base.Channel.RegisterUser(profile);
        }
        
        public System.Threading.Tasks.Task<GuessWhoDataAccess.Response<bool>> RegisterUserAsync(GuessWhoDataAccess.Profile profile) {
            return base.Channel.RegisterUserAsync(profile);
        }
        
        public GuessWhoDataAccess.Response<GuessWhoDataAccess.Profile> Login(string email, string password) {
            return base.Channel.Login(email, password);
        }
        
        public System.Threading.Tasks.Task<GuessWhoDataAccess.Response<GuessWhoDataAccess.Profile>> LoginAsync(string email, string password) {
            return base.Channel.LoginAsync(email, password);
        }
        
        public GuessWhoDataAccess.Response<GuessWhoDataAccess.Profile> VerifyUserRegisteredByEmail(string email) {
            return base.Channel.VerifyUserRegisteredByEmail(email);
        }
        
        public System.Threading.Tasks.Task<GuessWhoDataAccess.Response<GuessWhoDataAccess.Profile>> VerifyUserRegisteredByEmailAsync(string email) {
            return base.Channel.VerifyUserRegisteredByEmailAsync(email);
        }
        
        public GuessWhoDataAccess.Response<GuessWhoDataAccess.Profile> VerifyUserRegisteredByNickName(string nickname) {
            return base.Channel.VerifyUserRegisteredByNickName(nickname);
        }
        
        public System.Threading.Tasks.Task<GuessWhoDataAccess.Response<GuessWhoDataAccess.Profile>> VerifyUserRegisteredByNickNameAsync(string nickname) {
            return base.Channel.VerifyUserRegisteredByNickNameAsync(nickname);
        }
        
        public void Logout(string nickname) {
            base.Channel.Logout(nickname);
        }
        
        public System.Threading.Tasks.Task LogoutAsync(string nickname) {
            return base.Channel.LogoutAsync(nickname);
        }
        
        public GuessWhoDataAccess.Response<byte[]> GetAvatar(string userNickname) {
            return base.Channel.GetAvatar(userNickname);
        }
        
        public System.Threading.Tasks.Task<GuessWhoDataAccess.Response<byte[]>> GetAvatarAsync(string userNickname) {
            return base.Channel.GetAvatarAsync(userNickname);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameServices.IPlayerService")]
    public interface IPlayerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetBestPlayers", ReplyAction="http://tempuri.org/IPlayerService/GetBestPlayersResponse")]
        GuessWhoDataAccess.Response<GuessWhoDataAccess.TopPlayer[]> GetBestPlayers(string query, int totalPlayers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerService/GetBestPlayers", ReplyAction="http://tempuri.org/IPlayerService/GetBestPlayersResponse")]
        System.Threading.Tasks.Task<GuessWhoDataAccess.Response<GuessWhoDataAccess.TopPlayer[]>> GetBestPlayersAsync(string query, int totalPlayers);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerServiceChannel : GuessWhoTests.GameServices.IPlayerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerServiceClient : System.ServiceModel.ClientBase<GuessWhoTests.GameServices.IPlayerService>, GuessWhoTests.GameServices.IPlayerService {
        
        public PlayerServiceClient() {
        }
        
        public PlayerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlayerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public GuessWhoDataAccess.Response<GuessWhoDataAccess.TopPlayer[]> GetBestPlayers(string query, int totalPlayers) {
            return base.Channel.GetBestPlayers(query, totalPlayers);
        }
        
        public System.Threading.Tasks.Task<GuessWhoDataAccess.Response<GuessWhoDataAccess.TopPlayer[]>> GetBestPlayersAsync(string query, int totalPlayers) {
            return base.Channel.GetBestPlayersAsync(query, totalPlayers);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameServices.IProfileService")]
    public interface IProfileService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProfileService/UpdateUserProfileImage", ReplyAction="http://tempuri.org/IProfileService/UpdateUserProfileImageResponse")]
        GuessWhoDataAccess.Response<bool> UpdateUserProfileImage(byte[] newImage, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProfileService/UpdateUserProfileImage", ReplyAction="http://tempuri.org/IProfileService/UpdateUserProfileImageResponse")]
        System.Threading.Tasks.Task<GuessWhoDataAccess.Response<bool>> UpdateUserProfileImageAsync(byte[] newImage, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProfileService/UpdateUserNickname", ReplyAction="http://tempuri.org/IProfileService/UpdateUserNicknameResponse")]
        GuessWhoDataAccess.Response<bool> UpdateUserNickname(string newNickname, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProfileService/UpdateUserNickname", ReplyAction="http://tempuri.org/IProfileService/UpdateUserNicknameResponse")]
        System.Threading.Tasks.Task<GuessWhoDataAccess.Response<bool>> UpdateUserNicknameAsync(string newNickname, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProfileService/UpdateUserPassword", ReplyAction="http://tempuri.org/IProfileService/UpdateUserPasswordResponse")]
        GuessWhoDataAccess.Response<bool> UpdateUserPassword(string newPassword, int idAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProfileService/UpdateUserPassword", ReplyAction="http://tempuri.org/IProfileService/UpdateUserPasswordResponse")]
        System.Threading.Tasks.Task<GuessWhoDataAccess.Response<bool>> UpdateUserPasswordAsync(string newPassword, int idAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProfileService/UpdateUserFullName", ReplyAction="http://tempuri.org/IProfileService/UpdateUserFullNameResponse")]
        GuessWhoDataAccess.Response<bool> UpdateUserFullName(string newFullName, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProfileService/UpdateUserFullName", ReplyAction="http://tempuri.org/IProfileService/UpdateUserFullNameResponse")]
        System.Threading.Tasks.Task<GuessWhoDataAccess.Response<bool>> UpdateUserFullNameAsync(string newFullName, int idUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProfileServiceChannel : GuessWhoTests.GameServices.IProfileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProfileServiceClient : System.ServiceModel.ClientBase<GuessWhoTests.GameServices.IProfileService>, GuessWhoTests.GameServices.IProfileService {
        
        public ProfileServiceClient() {
        }
        
        public ProfileServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProfileServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProfileServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProfileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public GuessWhoDataAccess.Response<bool> UpdateUserProfileImage(byte[] newImage, int idUser) {
            return base.Channel.UpdateUserProfileImage(newImage, idUser);
        }
        
        public System.Threading.Tasks.Task<GuessWhoDataAccess.Response<bool>> UpdateUserProfileImageAsync(byte[] newImage, int idUser) {
            return base.Channel.UpdateUserProfileImageAsync(newImage, idUser);
        }
        
        public GuessWhoDataAccess.Response<bool> UpdateUserNickname(string newNickname, int idUser) {
            return base.Channel.UpdateUserNickname(newNickname, idUser);
        }
        
        public System.Threading.Tasks.Task<GuessWhoDataAccess.Response<bool>> UpdateUserNicknameAsync(string newNickname, int idUser) {
            return base.Channel.UpdateUserNicknameAsync(newNickname, idUser);
        }
        
        public GuessWhoDataAccess.Response<bool> UpdateUserPassword(string newPassword, int idAccount) {
            return base.Channel.UpdateUserPassword(newPassword, idAccount);
        }
        
        public System.Threading.Tasks.Task<GuessWhoDataAccess.Response<bool>> UpdateUserPasswordAsync(string newPassword, int idAccount) {
            return base.Channel.UpdateUserPasswordAsync(newPassword, idAccount);
        }
        
        public GuessWhoDataAccess.Response<bool> UpdateUserFullName(string newFullName, int idUser) {
            return base.Channel.UpdateUserFullName(newFullName, idUser);
        }
        
        public System.Threading.Tasks.Task<GuessWhoDataAccess.Response<bool>> UpdateUserFullNameAsync(string newFullName, int idUser) {
            return base.Channel.UpdateUserFullNameAsync(newFullName, idUser);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameServices.IFriendsService")]
    public interface IFriendsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsService/SendRequest", ReplyAction="http://tempuri.org/IFriendsService/SendRequestResponse")]
        GuessWhoDataAccess.Response<bool> SendRequest(int idUserRequester, int idUserRequested);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsService/SendRequest", ReplyAction="http://tempuri.org/IFriendsService/SendRequestResponse")]
        System.Threading.Tasks.Task<GuessWhoDataAccess.Response<bool>> SendRequestAsync(int idUserRequester, int idUserRequested);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsService/GetFriends", ReplyAction="http://tempuri.org/IFriendsService/GetFriendsResponse")]
        GuessWhoDataAccess.Response<GuessWhoServices.Friend[]> GetFriends(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsService/GetFriends", ReplyAction="http://tempuri.org/IFriendsService/GetFriendsResponse")]
        System.Threading.Tasks.Task<GuessWhoDataAccess.Response<GuessWhoServices.Friend[]>> GetFriendsAsync(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsService/GetRequests", ReplyAction="http://tempuri.org/IFriendsService/GetRequestsResponse")]
        GuessWhoDataAccess.Response<GuessWhoServices.Friend[]> GetRequests(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsService/GetRequests", ReplyAction="http://tempuri.org/IFriendsService/GetRequestsResponse")]
        System.Threading.Tasks.Task<GuessWhoDataAccess.Response<GuessWhoServices.Friend[]>> GetRequestsAsync(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsService/AnswerRequest", ReplyAction="http://tempuri.org/IFriendsService/AnswerRequestResponse")]
        GuessWhoDataAccess.Response<bool> AnswerRequest(int idFriendship, string answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendsService/AnswerRequest", ReplyAction="http://tempuri.org/IFriendsService/AnswerRequestResponse")]
        System.Threading.Tasks.Task<GuessWhoDataAccess.Response<bool>> AnswerRequestAsync(int idFriendship, string answer);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendsServiceChannel : GuessWhoTests.GameServices.IFriendsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendsServiceClient : System.ServiceModel.ClientBase<GuessWhoTests.GameServices.IFriendsService>, GuessWhoTests.GameServices.IFriendsService {
        
        public FriendsServiceClient() {
        }
        
        public FriendsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FriendsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public GuessWhoDataAccess.Response<bool> SendRequest(int idUserRequester, int idUserRequested) {
            return base.Channel.SendRequest(idUserRequester, idUserRequested);
        }
        
        public System.Threading.Tasks.Task<GuessWhoDataAccess.Response<bool>> SendRequestAsync(int idUserRequester, int idUserRequested) {
            return base.Channel.SendRequestAsync(idUserRequester, idUserRequested);
        }
        
        public GuessWhoDataAccess.Response<GuessWhoServices.Friend[]> GetFriends(int idUser) {
            return base.Channel.GetFriends(idUser);
        }
        
        public System.Threading.Tasks.Task<GuessWhoDataAccess.Response<GuessWhoServices.Friend[]>> GetFriendsAsync(int idUser) {
            return base.Channel.GetFriendsAsync(idUser);
        }
        
        public GuessWhoDataAccess.Response<GuessWhoServices.Friend[]> GetRequests(int idUser) {
            return base.Channel.GetRequests(idUser);
        }
        
        public System.Threading.Tasks.Task<GuessWhoDataAccess.Response<GuessWhoServices.Friend[]>> GetRequestsAsync(int idUser) {
            return base.Channel.GetRequestsAsync(idUser);
        }
        
        public GuessWhoDataAccess.Response<bool> AnswerRequest(int idFriendship, string answer) {
            return base.Channel.AnswerRequest(idFriendship, answer);
        }
        
        public System.Threading.Tasks.Task<GuessWhoDataAccess.Response<bool>> AnswerRequestAsync(int idFriendship, string answer) {
            return base.Channel.AnswerRequestAsync(idFriendship, answer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameServices.IGameService", CallbackContract=typeof(GuessWhoTests.GameServices.IGameServiceCallback))]
    public interface IGameService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/CreateMatch", ReplyAction="http://tempuri.org/IGameService/CreateMatchResponse")]
        GuessWhoDataAccess.Response<string> CreateMatch(string hostNickname, bool isTournamentMatch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/CreateMatch", ReplyAction="http://tempuri.org/IGameService/CreateMatchResponse")]
        System.Threading.Tasks.Task<GuessWhoDataAccess.Response<string>> CreateMatchAsync(string hostNickname, bool isTournamentMatch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/JoinGame", ReplyAction="http://tempuri.org/IGameService/JoinGameResponse")]
        GuessWhoDataAccess.Response<GuessWhoDataAccess.PlayerInMatch> JoinGame(string invitationCode, string nickname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/JoinGame", ReplyAction="http://tempuri.org/IGameService/JoinGameResponse")]
        System.Threading.Tasks.Task<GuessWhoDataAccess.Response<GuessWhoDataAccess.PlayerInMatch>> JoinGameAsync(string invitationCode, string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/ExitGame")]
        void ExitGame(string invitationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/ExitGame")]
        System.Threading.Tasks.Task ExitGameAsync(string invitationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/FinishGame")]
        void FinishGame(string invitationCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/FinishGame")]
        System.Threading.Tasks.Task FinishGameAsync(string invitationCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/PlayerStatusInMatchChanged", ReplyAction="http://tempuri.org/IGameService/PlayerStatusInMatchChangedResponse")]
        void PlayerStatusInMatchChanged(GuessWhoDataAccess.PlayerInMatch player, bool isInMatch);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServiceChannel : GuessWhoTests.GameServices.IGameService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameServiceClient : System.ServiceModel.DuplexClientBase<GuessWhoTests.GameServices.IGameService>, GuessWhoTests.GameServices.IGameService {
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public GuessWhoDataAccess.Response<string> CreateMatch(string hostNickname, bool isTournamentMatch) {
            return base.Channel.CreateMatch(hostNickname, isTournamentMatch);
        }
        
        public System.Threading.Tasks.Task<GuessWhoDataAccess.Response<string>> CreateMatchAsync(string hostNickname, bool isTournamentMatch) {
            return base.Channel.CreateMatchAsync(hostNickname, isTournamentMatch);
        }
        
        public GuessWhoDataAccess.Response<GuessWhoDataAccess.PlayerInMatch> JoinGame(string invitationCode, string nickname) {
            return base.Channel.JoinGame(invitationCode, nickname);
        }
        
        public System.Threading.Tasks.Task<GuessWhoDataAccess.Response<GuessWhoDataAccess.PlayerInMatch>> JoinGameAsync(string invitationCode, string nickname) {
            return base.Channel.JoinGameAsync(invitationCode, nickname);
        }
        
        public void ExitGame(string invitationCode) {
            base.Channel.ExitGame(invitationCode);
        }
        
        public System.Threading.Tasks.Task ExitGameAsync(string invitationCode) {
            return base.Channel.ExitGameAsync(invitationCode);
        }
        
        public void FinishGame(string invitationCode) {
            base.Channel.FinishGame(invitationCode);
        }
        
        public System.Threading.Tasks.Task FinishGameAsync(string invitationCode) {
            return base.Channel.FinishGameAsync(invitationCode);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameServices.IMatchStatusService", CallbackContract=typeof(GuessWhoTests.GameServices.IMatchStatusServiceCallback))]
    public interface IMatchStatusService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchStatusService/ListenMatchStatus")]
        void ListenMatchStatus(string matchCode, string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchStatusService/ListenMatchStatus")]
        System.Threading.Tasks.Task ListenMatchStatusAsync(string matchCode, string nickname);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchStatusService/StartCharacterSelection")]
        void StartCharacterSelection(string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchStatusService/StartCharacterSelection")]
        System.Threading.Tasks.Task StartCharacterSelectionAsync(string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchStatusService/SelectCharacter")]
        void SelectCharacter(string characterName, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchStatusService/SelectCharacter")]
        System.Threading.Tasks.Task SelectCharacterAsync(string characterName, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchStatusService/StartGame")]
        void StartGame(string characterName, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchStatusService/StartGame")]
        System.Threading.Tasks.Task StartGameAsync(string characterName, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchStatusService/GuessCharacter", ReplyAction="http://tempuri.org/IMatchStatusService/GuessCharacterResponse")]
        GuessWhoDataAccess.Response<bool> GuessCharacter(string characterName, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchStatusService/GuessCharacter", ReplyAction="http://tempuri.org/IMatchStatusService/GuessCharacterResponse")]
        System.Threading.Tasks.Task<GuessWhoDataAccess.Response<bool>> GuessCharacterAsync(string characterName, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchStatusService/SendAnswer")]
        void SendAnswer(bool looksLikeMyCharacter, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchStatusService/SendAnswer")]
        System.Threading.Tasks.Task SendAnswerAsync(bool looksLikeMyCharacter, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchStatusService/StopListeningMatchStatus")]
        void StopListeningMatchStatus(string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMatchStatusService/StopListeningMatchStatus")]
        System.Threading.Tasks.Task StopListeningMatchStatusAsync(string matchCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchStatusServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMatchStatusService/MatchStatusChanged", ReplyAction="http://tempuri.org/IMatchStatusService/MatchStatusChangedResponse")]
        void MatchStatusChanged(GuessWhoServices.MatchStatus matchStatusCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMatchStatusServiceChannel : GuessWhoTests.GameServices.IMatchStatusService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MatchStatusServiceClient : System.ServiceModel.DuplexClientBase<GuessWhoTests.GameServices.IMatchStatusService>, GuessWhoTests.GameServices.IMatchStatusService {
        
        public MatchStatusServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MatchStatusServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MatchStatusServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatchStatusServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MatchStatusServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ListenMatchStatus(string matchCode, string nickname) {
            base.Channel.ListenMatchStatus(matchCode, nickname);
        }
        
        public System.Threading.Tasks.Task ListenMatchStatusAsync(string matchCode, string nickname) {
            return base.Channel.ListenMatchStatusAsync(matchCode, nickname);
        }
        
        public void StartCharacterSelection(string matchCode) {
            base.Channel.StartCharacterSelection(matchCode);
        }
        
        public System.Threading.Tasks.Task StartCharacterSelectionAsync(string matchCode) {
            return base.Channel.StartCharacterSelectionAsync(matchCode);
        }
        
        public void SelectCharacter(string characterName, string matchCode) {
            base.Channel.SelectCharacter(characterName, matchCode);
        }
        
        public System.Threading.Tasks.Task SelectCharacterAsync(string characterName, string matchCode) {
            return base.Channel.SelectCharacterAsync(characterName, matchCode);
        }
        
        public void StartGame(string characterName, string matchCode) {
            base.Channel.StartGame(characterName, matchCode);
        }
        
        public System.Threading.Tasks.Task StartGameAsync(string characterName, string matchCode) {
            return base.Channel.StartGameAsync(characterName, matchCode);
        }
        
        public GuessWhoDataAccess.Response<bool> GuessCharacter(string characterName, string matchCode) {
            return base.Channel.GuessCharacter(characterName, matchCode);
        }
        
        public System.Threading.Tasks.Task<GuessWhoDataAccess.Response<bool>> GuessCharacterAsync(string characterName, string matchCode) {
            return base.Channel.GuessCharacterAsync(characterName, matchCode);
        }
        
        public void SendAnswer(bool looksLikeMyCharacter, string matchCode) {
            base.Channel.SendAnswer(looksLikeMyCharacter, matchCode);
        }
        
        public System.Threading.Tasks.Task SendAnswerAsync(bool looksLikeMyCharacter, string matchCode) {
            return base.Channel.SendAnswerAsync(looksLikeMyCharacter, matchCode);
        }
        
        public void StopListeningMatchStatus(string matchCode) {
            base.Channel.StopListeningMatchStatus(matchCode);
        }
        
        public System.Threading.Tasks.Task StopListeningMatchStatusAsync(string matchCode) {
            return base.Channel.StopListeningMatchStatusAsync(matchCode);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameServices.IChatService", CallbackContract=typeof(GuessWhoTests.GameServices.IChatServiceCallback))]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/EnterToChatRoom")]
        void EnterToChatRoom(string chatRoomCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/EnterToChatRoom")]
        System.Threading.Tasks.Task EnterToChatRoomAsync(string chatRoomCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/LeaveChatRoom")]
        void LeaveChatRoom(string chatRoomCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/LeaveChatRoom")]
        System.Threading.Tasks.Task LeaveChatRoomAsync(string chatRoomCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendMessage", ReplyAction="http://tempuri.org/IChatService/SendMessageResponse")]
        GuessWhoDataAccess.Response<bool> SendMessage(string chatRoomCode, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendMessage", ReplyAction="http://tempuri.org/IChatService/SendMessageResponse")]
        System.Threading.Tasks.Task<GuessWhoDataAccess.Response<bool>> SendMessageAsync(string chatRoomCode, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/NewMessageReceived", ReplyAction="http://tempuri.org/IChatService/NewMessageReceivedResponse")]
        void NewMessageReceived(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : GuessWhoTests.GameServices.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<GuessWhoTests.GameServices.IChatService>, GuessWhoTests.GameServices.IChatService {
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void EnterToChatRoom(string chatRoomCode) {
            base.Channel.EnterToChatRoom(chatRoomCode);
        }
        
        public System.Threading.Tasks.Task EnterToChatRoomAsync(string chatRoomCode) {
            return base.Channel.EnterToChatRoomAsync(chatRoomCode);
        }
        
        public void LeaveChatRoom(string chatRoomCode) {
            base.Channel.LeaveChatRoom(chatRoomCode);
        }
        
        public System.Threading.Tasks.Task LeaveChatRoomAsync(string chatRoomCode) {
            return base.Channel.LeaveChatRoomAsync(chatRoomCode);
        }
        
        public GuessWhoDataAccess.Response<bool> SendMessage(string chatRoomCode, string message) {
            return base.Channel.SendMessage(chatRoomCode, message);
        }
        
        public System.Threading.Tasks.Task<GuessWhoDataAccess.Response<bool>> SendMessageAsync(string chatRoomCode, string message) {
            return base.Channel.SendMessageAsync(chatRoomCode, message);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameServices.IDrawService", CallbackContract=typeof(GuessWhoTests.GameServices.IDrawServiceCallback))]
    public interface IDrawService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDrawService/SubscribeToDrawService")]
        void SubscribeToDrawService(string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDrawService/SubscribeToDrawService")]
        System.Threading.Tasks.Task SubscribeToDrawServiceAsync(string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDrawService/UnsubscribeFromDrawService")]
        void UnsubscribeFromDrawService(string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDrawService/UnsubscribeFromDrawService")]
        System.Threading.Tasks.Task UnsubscribeFromDrawServiceAsync(string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDrawService/SendDraw")]
        void SendDraw(GuessWhoServices.SerializedLine[] localDrawMap, string matchCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDrawService/SendDraw")]
        System.Threading.Tasks.Task SendDrawAsync(GuessWhoServices.SerializedLine[] localDrawMap, string matchCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDrawServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDrawService/DrawReceived")]
        void DrawReceived(GuessWhoServices.SerializedLine[] adversaryDrawMap);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDrawServiceChannel : GuessWhoTests.GameServices.IDrawService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DrawServiceClient : System.ServiceModel.DuplexClientBase<GuessWhoTests.GameServices.IDrawService>, GuessWhoTests.GameServices.IDrawService {
        
        public DrawServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public DrawServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public DrawServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DrawServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DrawServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SubscribeToDrawService(string matchCode) {
            base.Channel.SubscribeToDrawService(matchCode);
        }
        
        public System.Threading.Tasks.Task SubscribeToDrawServiceAsync(string matchCode) {
            return base.Channel.SubscribeToDrawServiceAsync(matchCode);
        }
        
        public void UnsubscribeFromDrawService(string matchCode) {
            base.Channel.UnsubscribeFromDrawService(matchCode);
        }
        
        public System.Threading.Tasks.Task UnsubscribeFromDrawServiceAsync(string matchCode) {
            return base.Channel.UnsubscribeFromDrawServiceAsync(matchCode);
        }
        
        public void SendDraw(GuessWhoServices.SerializedLine[] localDrawMap, string matchCode) {
            base.Channel.SendDraw(localDrawMap, matchCode);
        }
        
        public System.Threading.Tasks.Task SendDrawAsync(GuessWhoServices.SerializedLine[] localDrawMap, string matchCode) {
            return base.Channel.SendDrawAsync(localDrawMap, matchCode);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GameServices.IReportService")]
    public interface IReportService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ReportPlayer", ReplyAction="http://tempuri.org/IReportService/ReportPlayerResponse")]
        GuessWhoDataAccess.Response<bool> ReportPlayer(GuessWhoServices.PlayerReport playerReport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/ReportPlayer", ReplyAction="http://tempuri.org/IReportService/ReportPlayerResponse")]
        System.Threading.Tasks.Task<GuessWhoDataAccess.Response<bool>> ReportPlayerAsync(GuessWhoServices.PlayerReport playerReport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetReportsByUserId", ReplyAction="http://tempuri.org/IReportService/GetReportsByUserIdResponse")]
        GuessWhoDataAccess.Response<GuessWhoDataAccess.Report[]> GetReportsByUserId(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/GetReportsByUserId", ReplyAction="http://tempuri.org/IReportService/GetReportsByUserIdResponse")]
        System.Threading.Tasks.Task<GuessWhoDataAccess.Response<GuessWhoDataAccess.Report[]>> GetReportsByUserIdAsync(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/VerifyPlayerPermanentBanned", ReplyAction="http://tempuri.org/IReportService/VerifyPlayerPermanentBannedResponse")]
        GuessWhoDataAccess.Response<bool> VerifyPlayerPermanentBanned(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/VerifyPlayerPermanentBanned", ReplyAction="http://tempuri.org/IReportService/VerifyPlayerPermanentBannedResponse")]
        System.Threading.Tasks.Task<GuessWhoDataAccess.Response<bool>> VerifyPlayerPermanentBannedAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/VerifyPlayerTemporarilyBanned", ReplyAction="http://tempuri.org/IReportService/VerifyPlayerTemporarilyBannedResponse")]
        GuessWhoDataAccess.Response<System.DateTime> VerifyPlayerTemporarilyBanned(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReportService/VerifyPlayerTemporarilyBanned", ReplyAction="http://tempuri.org/IReportService/VerifyPlayerTemporarilyBannedResponse")]
        System.Threading.Tasks.Task<GuessWhoDataAccess.Response<System.DateTime>> VerifyPlayerTemporarilyBannedAsync(string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReportServiceChannel : GuessWhoTests.GameServices.IReportService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReportServiceClient : System.ServiceModel.ClientBase<GuessWhoTests.GameServices.IReportService>, GuessWhoTests.GameServices.IReportService {
        
        public ReportServiceClient() {
        }
        
        public ReportServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReportServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public GuessWhoDataAccess.Response<bool> ReportPlayer(GuessWhoServices.PlayerReport playerReport) {
            return base.Channel.ReportPlayer(playerReport);
        }
        
        public System.Threading.Tasks.Task<GuessWhoDataAccess.Response<bool>> ReportPlayerAsync(GuessWhoServices.PlayerReport playerReport) {
            return base.Channel.ReportPlayerAsync(playerReport);
        }
        
        public GuessWhoDataAccess.Response<GuessWhoDataAccess.Report[]> GetReportsByUserId(int idUser) {
            return base.Channel.GetReportsByUserId(idUser);
        }
        
        public System.Threading.Tasks.Task<GuessWhoDataAccess.Response<GuessWhoDataAccess.Report[]>> GetReportsByUserIdAsync(int idUser) {
            return base.Channel.GetReportsByUserIdAsync(idUser);
        }
        
        public GuessWhoDataAccess.Response<bool> VerifyPlayerPermanentBanned(string email) {
            return base.Channel.VerifyPlayerPermanentBanned(email);
        }
        
        public System.Threading.Tasks.Task<GuessWhoDataAccess.Response<bool>> VerifyPlayerPermanentBannedAsync(string email) {
            return base.Channel.VerifyPlayerPermanentBannedAsync(email);
        }
        
        public GuessWhoDataAccess.Response<System.DateTime> VerifyPlayerTemporarilyBanned(string email) {
            return base.Channel.VerifyPlayerTemporarilyBanned(email);
        }
        
        public System.Threading.Tasks.Task<GuessWhoDataAccess.Response<System.DateTime>> VerifyPlayerTemporarilyBannedAsync(string email) {
            return base.Channel.VerifyPlayerTemporarilyBannedAsync(email);
        }
    }
}
